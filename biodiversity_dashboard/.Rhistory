margin = list(
t = 80,
l = 20,
r = 20,
b = 20
),
yaxis = list(
title = "Fruits",
titlefont = list(
family = "Arial",
size = 14,
color = "#333"
),
showgrid = FALSE,
zeroline = FALSE,
showticklabels = TRUE
),
xaxis = list(
title = "",
titlefont = list(
family = "Arial",
size = 14,
color = "#333"
),
showgrid = FALSE,
zeroline = FALSE,
showticklabels = FALSE
)
)
library(plotly)
library(dplyr)
# create a data frame with the flows
data <- data.frame(
source = c("Red Apple", "Red Apple", "Red Apple", "Orange", "Orange", "Bananas"),
target = c("Orange", "Bananas", "Green Apple", "Green Apple", "Green Apple", "Green Apple"),
value = c(1, 1, 1, 1, 1, 1)
)
# create a data frame with the colors of the fruits
colors <- data.frame(
fruit = c("Red Apple", "Orange", "Bananas", "Green Apple"),
color = c("#BD0000", "#FFA500", "#C2B800", "#006B24") # use brighter hex codes for the colors
)
# join the data frames to assign colors to the fruits
data <- left_join(data, colors, by = c("source" = "fruit"))
data <- left_join(data, colors, by = c("target" = "fruit"), suffix = c(".source", ".target"))
# create the plot
plot_ly(
type = "sankey",
orientation = "h",
node = list(
label = colors$fruit,
color = colors$color,
pad = 15,
thickness = 20,
line = list(color = "black", width = 0.5)
),
link = list(
source = data$source,
target = data$target,
value = data$value,
color = colors$color.source, # use node colors for link colors
opacity = 0.5, # set the opacity of the link colors to make them slightly transparent
line = list(width = 0.5)
)
) %>%
layout(
title = "Fruit Flows",
font = list(size = 16)
)
library(plotly)
library(dplyr)
# create a data frame with the flows
data <- data.frame(
source = c("Red Apple", "Red Apple", "Red Apple", "Orange", "Orange", "Bananas"),
target = c("Orange", "Bananas", "Green Apple", "Green Apple", "Green Apple", "Green Apple"),
value = c(1, 1, 1, 1, 1, 1)
)
# create a data frame with the colors of the fruits
colors <- data.frame(
fruit = c("Red Apple", "Orange", "Bananas", "Green Apple"),
color = c("#BD0000", "#FFA500", "#C2B800", "#006B24") # use brighter hex codes for the colors
)
# join the data frames to assign colors to the fruits
data <- left_join(data, colors, by = c("source" = "fruit"))
data <- left_join(data, colors, by = c("target" = "fruit"), suffix = c(".source", ".target"))
# create the plot
plot_ly(
type = "sankey",
orientation = "h",
node = list(
label = colors$fruit,
color = colors$color,
pad = 15,
thickness = 20,
line = list(color = "black", width = 0.5)
),
link = list(
source = data$source,
target = data$target,
value = data$value,
color = colors$color.source, # use node colors for link colors
opacity = 0.5, # set the opacity of the link colors to make them slightly transparent
line = list(width = 0.5)
)
) %>%
layout(
title = "Fruit Flows",
font = list(size = 16)
)
library(plotly)
library(dplyr)
# create a data frame with the flows
data <- data.frame(
source = c("Red Apple", "Red Apple", "Red Apple", "Orange", "Orange", "Bananas"),
target = c("Orange", "Bananas", "Green Apple", "Green Apple", "Green Apple", "Green Apple"),
value = c(1, 1, 1, 1, 1, 1)
)
# create a data frame with the colors of the fruits
colors <- data.frame(
fruit = c("Red Apple", "Orange", "Bananas", "Green Apple"),
color = c("#BD0000", "#FFA500", "#C2B800", "#006B24") # use brighter hex codes for the colors
)
# join the data frames to assign colors to the fruits
data <- left_join(data, colors, by = c("source" = "fruit"))
data <- left_join(data, colors, by = c("target" = "fruit"), suffix = c(".source", ".target"))
# create the plot
plot_ly(
type = "sankey",
orientation = "h",
node = list(
label = colors$fruit,
color = colors$color,
pad = 15,
thickness = 20,
line = list(color = "black", width = 0.5)
),
link = list(
source = data$source,
target = data$target,
value = data$value,
color = colors$color.source, # use node colors for link colors
opacity = 0.5, # set the opacity of the link colors to make them slightly transparent
line = list(width = 0.5)
)
) %>%
layout(
title = "Fruit Flows",
font = list(size = 16)
)
library(plotly)
library(dplyr)
# create a data frame with the flows
data <- data.frame(
source = c("Red Apple", "Red Apple", "Red Apple", "Orange", "Orange", "Bananas"),
target = c("Orange", "Bananas", "Green Apple", "Green Apple", "Green Apple", "Green Apple"),
value = c(1, 1, 1, 1, 1, 1)
)
# create a data frame with the colors of the fruits
colors <- data.frame(
fruit = c("Red Apple", "Orange", "Bananas", "Green Apple"),
color = c("#BD0000", "#FFA500", "#C2B800", "#006B24") # use brighter hex codes for the colors
)
# join the data frames to assign colors to the fruits
data <- left_join(data, colors, by = c("source" = "fruit"))
data <- left_join(data, colors, by = c("target" = "fruit"), suffix = c(".source", ".target"))
# create the plot
plot_ly(
type = "sankey",
orientation = "h",
node = list(
label = colors$fruit,
color = colors$color %>% colorAlpha(alpha = 0.8),
pad = 15,
thickness = 20,
line = list(color = "black", width = 0.5)
),
link = list(
source = data$source,
target = data$target,
value = data$value,
color = colors$color.source %>% colorAlpha(alpha = 0.3), # set the opacity of the link colors to make them lighter than node colors
line = list(width = 0.5)
)
) %>%
layout(
title = "Fruit Flows",
font = list(size = 16)
)
library(plotly)
library(dplyr)
library(scales)
# create a data frame with the flows
data <- data.frame(
source = c("Red Apple", "Red Apple", "Red Apple", "Orange", "Orange", "Bananas"),
target = c("Orange", "Bananas", "Green Apple", "Green Apple", "Green Apple", "Green Apple"),
value = c(1, 1, 1, 1, 1, 1)
)
# create a data frame with the colors of the fruits
colors <- data.frame(
fruit = c("Red Apple", "Orange", "Bananas", "Green Apple"),
color = c("#BD0000", "#FFA500", "#C2B800", "#006B24") # use brighter hex codes for the colors
)
# join the data frames to assign colors to the fruits
data <- left_join(data, colors, by = c("source" = "fruit"))
data <- left_join(data, colors, by = c("target" = "fruit"), suffix = c(".source", ".target"))
# create the plot
plot_ly(
type = "sankey",
orientation = "h",
node = list(
label = colors$fruit,
color = colors$color %>% colorAlpha(alpha = 0.8),
pad = 15,
thickness = 20,
line = list(color = "black", width = 0.5)
),
link = list(
source = data$source,
target = data$target,
value = data$value,
color = colors$color.source %>% colorAlpha(alpha = 0.3), # set the opacity of the link colors to make them lighter than node colors
line = list(width = 0.5)
)
) %>%
layout(
title = "Fruit Flows",
font = list(size = 16)
)
library(plotly)
library(dplyr)
library(scales)
# create a data frame with the flows
data <- data.frame(
source = c("Red Apple", "Red Apple", "Red Apple", "Orange", "Orange", "Bananas"),
target = c("Orange", "Bananas", "Green Apple", "Green Apple", "Green Apple", "Green Apple"),
value = c(1, 1, 1, 1, 1, 1)
)
# create a data frame with the colors of the fruits
colors <- data.frame(
fruit = c("Red Apple", "Orange", "Bananas", "Green Apple"),
color = c("#BD0000", "#FFA500", "#C2B800", "#006B24") # use brighter hex codes for the colors
)
# join the data frames to assign colors to the fruits
data <- left_join(data, colors, by = c("source" = "fruit"))
data <- left_join(data, colors, by = c("target" = "fruit"), suffix = c(".source", ".target"))
# create the plot
plot_ly(
type = "sankey",
orientation = "h",
node = list(
label = colors$fruit,
color = colors$color %>% colorAlpha(alpha = 0.8),
pad = 15,
thickness = 20,
line = list(color = "black", width = 0.5)
),
link = list(
source = data$source,
target = data$target,
value = data$value,
color = colors$color.source %>% colorAlpha(alpha = 0.3), # set the opacity of the link colors to make them lighter than node colors
line = list(width = 0.5)
)
) %>%
layout(
title = "Fruit Flows",
font = list(size = 16)
)
library(plotly)
library(dplyr)
library(scales)
# create a data frame with the flows
data <- data.frame(
source = c("Red Apple", "Red Apple", "Red Apple", "Orange", "Orange", "Bananas"),
target = c("Orange", "Bananas", "Green Apple", "Green Apple", "Green Apple", "Green Apple"),
value = c(1, 1, 1, 1, 1, 1)
)
# create a data frame with the colors of the fruits
colors <- data.frame(
fruit = c("Red Apple", "Orange", "Bananas", "Green Apple"),
color = c("#BD0000", "#FFA500", "#C2B800", "#006B24") # use brighter hex codes for the colors
)
# join the data frames to assign colors to the fruits
data <- left_join(data, colors, by = c("source" = "fruit"))
data <- left_join(data, colors, by = c("target" = "fruit"), suffix = c(".source", ".target"))
# create the plot
plot_ly(
type = "sankey",
orientation = "h",
node = list(
label = colors$fruit,
color = colors$color %>% colorAlpha(alpha = 0.8),
pad = 15,
thickness = 20,
line = list(color = "black", width = 0.5)
),
link = list(
source = data$source,
target = data$target,
value = data$value,
color = colors$color.source %>% colorAlpha(alpha = 0.3), # set the opacity of the link colors to make them lighter than node colors
line = list(width = 0.5)
)
) %>%
layout(
title = "Fruit Flows",
font = list(size = 16)
)
library(plotly)
library(dplyr)
# create a data frame with the flows
data <- data.frame(
source = c("Red Apple", "Red Apple", "Red Apple", "Orange", "Orange", "Bananas"),
target = c("Orange", "Bananas", "Green Apple", "Green Apple", "Green Apple", "Green Apple"),
value = c(1, 1, 1, 1, 1, 1)
)
# create a data frame with the colors of the fruits
colors <- data.frame(
fruit = c("Red Apple", "Orange", "Bananas", "Green Apple"),
color = c("#A91D00", "#FFB347", "#A9A900", "#00802B") # use darker hex codes for the colors
)
# join the data frames to assign colors to the fruits
data <- left_join(data, colors, by = c("source" = "fruit"))
data <- left_join(data, colors, by = c("target" = "fruit"), suffix = c(".source", ".target"))
# create the plot
plot_ly(
type = "sankey",
orientation = "h",
node = list(
label = colors$fruit,
color = colors$color,
pad = 15,
thickness = 20,
line = list(color = "black", width = 0.5)
),
link = list(
source = data$source,
target = data$target,
value = data$value,
color = colors$color.source, # set the link colors to match the color of the source node
line = list(width = 0.5)
)
) %>%
layout(
title = "Fruit Flows",
font = list(size = 16)
)
library(plotly)
library(dplyr)
# create a data frame with the flows
data <- data.frame(
source = c("Red Apple", "Red Apple", "Red Apple", "Orange", "Orange", "Bananas"),
target = c("Orange", "Bananas", "Green Apple", "Green Apple", "Green Apple", "Green Apple"),
value = c(1, 1, 1, 1, 1, 1)
)
# create a data frame with the colors of the fruits
colors <- data.frame(
fruit = c("Red Apple", "Orange", "Bananas", "Green Apple"),
color = c("#A91D00", "#FFB347", "#A9A900", "#00802B") # use darker hex codes for the colors
)
# join the data frames to assign colors to the fruits
data <- left_join(data, colors, by = c("source" = "fruit"))
data <- left_join(data, colors, by = c("target" = "fruit"), suffix = c(".source", ".target"))
# create the plot
plot_ly(
type = "sankey",
orientation = "h",
node = list(
label = colors$fruit,
color = colors$color,
pad = 15,
thickness = 20,
line = list(color = "black", width = 0.5)
),
link = list(
source = data$source,
target = data$target,
value = data$value,
color = colors$color.source, # set the link colors to match the color of the source node
line = list(width = 0.5)
)
) %>%
layout(
title = "Fruit Flows",
font = list(size = 16)
)
library(plotly)
library(dplyr)
# create a data frame with the flows
data <- data.frame(
source = c("Red Apple", "Red Apple", "Red Apple", "Orange", "Orange", "Bananas"),
target = c("Orange", "Bananas", "Green Apple", "Green Apple", "Green Apple", "Green Apple"),
value = c(1, 1, 1, 1, 1, 1)
)
# create a data frame with the colors of the fruits
colors <- data.frame(
fruit = c("Red Apple", "Orange", "Bananas", "Green Apple"),
color = c("#FF6969AA", "#FFA500AA", "#FFFF69AA", "#69FF69AA") # alpha value of 0xAA (170) makes the colors semi-transparent
)
# join the data frames to assign colors to the fruits
data <- left_join(data, colors, by = c("source" = "fruit"))
data <- left_join(data, colors, by = c("target" = "fruit"), suffix = c(".source", ".target"))
# create the plot
plot_ly(
type = "sankey",
orientation = "h",
node = list(
label = colors$fruit,
color = colors$color,
pad = 15, # adds padding around the node labels
thickness = 20, # adjusts the thickness of the nodes
line = list(
width = 0.5, # adds a border around the nodes
color = "rgba(0,0,0,0.2)" # sets the color of the border
)
),
link = list(
source = match(data$source, colors$fruit) - 1,
target = match(data$target, colors$fruit) - 1,
value = data$value,
color = data$color.source,
width = 10 # adjusts the width of the links
),
hovertemplate = "%{source.label} → %{target.label}: %{value}", # sets the hover text
arrangement = "snap" # arranges the nodes in a more compact and organized manner
) %>%
layout(
title = "Fruit Flows",
font = list(
family = "Arial",
size = 14,
color = "#333" # sets the font color
),
paper_bgcolor = "#F2F2F2", # sets the background color of the plot area
plot_bgcolor = "#F2F2F2", # sets the background color of the entire plot
margin = list(
t = 80, # adds some space between the top of the plot and the title
l = 20, # adds some space between the left of the plot and the y-axis
r = 20, # adds some space between the right of the plot and the x-axis
b = 20  # adds some space between the bottom of the plot and the x-axis
),
yaxis = list(
title = "Fruits",
titlefont = list(
family = "Arial",
size = 14,
color = "#333" # sets the y-axis label color
),
showgrid = FALSE, # turns off the y-axis grid lines
zeroline = FALSE, # turns off the y-axis zero line
showticklabels = TRUE # shows the y-axis tick labels
),
xaxis = list(    title = "",
titlefont = list(
family = "Arial",
size = 14,
color = "#333" # sets the x-axis label color
),
showgrid = FALSE, # turns off the x-axis grid lines
zeroline = FALSE, # turns off the x-axis zero line
showticklabels = FALSE # turns off the x-axis tick labels
)
)
library(shiny)
library(crosstalk)
library(tidyverse)
library(lubridate)
library(glue)
library(leaflet)
library(plotly)
library(sf)
occurence_pl <-
readr::read_csv("./biodiversity-data/occurence_pl.csv") %>%
mutate(
display_name = ifelse(
is.na(vernacularName),
scientificName,
glue(
"{scientificName} ({vernacularName})",
scientificName = scientificName,
vernacularName = vernacularName
)
),
popup = glue(
"
<b>{display_name}</b><br>
occurrence ID: {occurrence_id}<br>
Date Seen: {date_seen}<br>
Sex: {sex}<br>
Life Stage: {life_stage}<br>
Behavior: {behavior}
",
display_name = display_name,
occurrence_id = occurrenceID,
date_seen = as.Date(eventDate),
sex = sex,
life_stage = lifeStage,
behavior = behavior
)
)
runApp('appsilon_app/biodiversity_dashboard')
runApp('appsilon_app/biodiversity_dashboard')
runApp('appsilon_app/biodiversity_dashboard')
runApp('appsilon_app/biodiversity_dashboard')
runApp('appsilon_app/biodiversity_dashboard')
runApp('appsilon_app/biodiversity_dashboard')
runApp('appsilon_app/biodiversity_dashboard')
runApp('appsilon_app/biodiversity_dashboard')
providers
runApp('appsilon_app/biodiversity_dashboard')
providers$Thunderforest.Transport
runApp('appsilon_app/biodiversity_dashboard')
