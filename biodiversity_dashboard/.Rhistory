value = sankey_df_ordered$value
)
)
# Create Sankey diagram
plot_ly(type = "sankey", arrangement = "snap") %>%
add_trace(
# Set the domain (position) of the nodes
domain = list(x =  c(0, 1),
y =  c(0, 1)),
valueformat = ".3f",
# Set the orientation of the diagram to horizontal
orientation = "h",
# Set the label for each node
node = list(label = unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
),
textfont = list(weight = "bold",size=50)),
# Set the source, target, and value for each link
link = list(
source = match(sankey_df_ordered$source, unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)) - 1,
target = match(sankey_df_ordered$target, unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)) - 1,
value = sankey_df_ordered$value
)
)
# Create Sankey diagram
plot_ly(type = "sankey", arrangement = "snap") %>%
add_trace(
# Set the domain (position) of the nodes
domain = list(x =  c(0, 1),
y =  c(0, 1)),
valueformat = ".3f",
# Set the orientation of the diagram to horizontal
orientation = "h",
# Set the label for each node
node = list(label = unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
),
font = list(weight = "bold",size=50)),
# Set the source, target, and value for each link
link = list(
source = match(sankey_df_ordered$source, unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)) - 1,
target = match(sankey_df_ordered$target, unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)) - 1,
value = sankey_df_ordered$value
)
)
plot_ly(type = "sankey", arrangement = "snap") %>%
add_trace(
# Set the domain (position) of the nodes
domain = list(x =  c(0, 1),
y =  c(0, 1)),
valueformat = ".3f",
# Set the orientation of the diagram to horizontal
orientation = "h",
# Set the label for each node
node = list(label = unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)),
# Set the source, target, and value for each link
link = list(
source = match(sankey_df_ordered$source, unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)) - 1,
target = match(sankey_df_ordered$target, unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)) - 1,
value = sankey_df_ordered$value
)
) %>%
layout(font=list(size=10))
plot_ly(type = "sankey", arrangement = "snap") %>%
add_trace(
# Set the domain (position) of the nodes
domain = list(x =  c(0, 1),
y =  c(0, 1)),
valueformat = ".3f",
# Set the orientation of the diagram to horizontal
orientation = "h",
# Set the label for each node
node = list(label = unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)),
# Set the source, target, and value for each link
link = list(
source = match(sankey_df_ordered$source, unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)) - 1,
target = match(sankey_df_ordered$target, unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)) - 1,
value = sankey_df_ordered$value
)
) %>%
layout(font=list(size=10))
plot_ly(type = "sankey", arrangement = "snap") %>%
add_trace(
# Set the domain (position) of the nodes
domain = list(x =  c(0, 1),
y =  c(0, 1)),
valueformat = ".3f",
# Set the orientation of the diagram to horizontal
orientation = "h",
# Set the label for each node
node = list(label = unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)),
# Set the source, target, and value for each link
link = list(
source = match(sankey_df_ordered$source, unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)) - 1,
target = match(sankey_df_ordered$target, unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)) - 1,
value = sankey_df_ordered$value
)
) %>%
layout(font=list(size=20))
plot_ly(type = "sankey", arrangement = "snap") %>%
add_trace(
# Set the domain (position) of the nodes
domain = list(x =  c(0, 1),
y =  c(0, 1)),
valueformat = ".3f",
# Set the orientation of the diagram to horizontal
orientation = "h",
# Set the label for each node
node = list(label = unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)),
# Set the source, target, and value for each link
link = list(
source = match(sankey_df_ordered$source, unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)) - 1,
target = match(sankey_df_ordered$target, unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)) - 1,
value = sankey_df_ordered$value
)
) %>%
layout(font=list(size=20))
plot_ly(type = "sankey", arrangement = "snap") %>%
add_trace(
# Set the domain (position) of the nodes
domain = list(x =  c(0, 1),
y =  c(0, 1)),
valueformat = ".3f",
# Set the orientation of the diagram to horizontal
orientation = "h",
# Set the label for each node
node = list(label = unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)),
# Set the source, target, and value for each link
link = list(
source = match(sankey_df_ordered$source, unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)) - 1,
target = match(sankey_df_ordered$target, unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)) - 1,
value = sankey_df_ordered$value
)
) %>%
layout(font=list(size=15))
plot_ly(type = "sankey", arrangement = "snap") %>%
add_trace(
# Set the domain (position) of the nodes
domain = list(x =  c(0, 1),
y =  c(0, 1)),
valueformat = ".3f",
# Set the orientation of the diagram to horizontal
orientation = "h",
# Set the label for each node
node = list(label = unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)),
# Set the source, target, and value for each link
link = list(
source = match(sankey_df_ordered$source, unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)) - 1,
target = match(sankey_df_ordered$target, unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)) - 1,
value = sankey_df_ordered$value
)
) %>%
layout(font=list(size=15))
# Create Sankey diagram
plot_ly(type = "sankey", arrangement = "snap") %>%
add_trace(
# Set the domain (position) of the nodes
domain = list(x =  c(0, 1),
y =  c(0, 1)),
valueformat = ".3f",
# Set the orientation of the diagram to horizontal
orientation = "h",
# Set the label for each node
node = list(label = unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)),
# Set the source, target, and value for each link
link = list(
source = match(sankey_df_ordered$source, unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)) - 1,
target = match(sankey_df_ordered$target, unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)) - 1,
value = sankey_df_ordered$value
)
) %>%
layout(font=list(size=15,
weight="bold"))
# Create Sankey diagram
plot_ly(type = "sankey", arrangement = "snap") %>%
add_trace(
# Set the domain (position) of the nodes
domain = list(x =  c(0, 1),
y =  c(0, 1)),
valueformat = ".3f",
# Set the orientation of the diagram to horizontal
orientation = "h",
# Set the label for each node
node = list(label = unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)),
# Set the source, target, and value for each link
link = list(
source = match(sankey_df_ordered$source, unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)) - 1,
target = match(sankey_df_ordered$target, unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)) - 1,
value = sankey_df_ordered$value
)
) %>%
layout(font=list(size=15,
weight="bold"))
# Create Sankey diagram
plot_ly(type = "sankey", arrangement = "snap") %>%
add_trace(
# Set the domain (position) of the nodes
domain = list(x =  c(0, 1),
y =  c(0, 1)),
valueformat = ".3f",
# Set the orientation of the diagram to horizontal
orientation = "h",
# Set the label for each node
node = list(label = unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)),
# Set the source, target, and value for each link
link = list(
source = match(sankey_df_ordered$source, unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)) - 1,
target = match(sankey_df_ordered$target, unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)) - 1,
value = sankey_df_ordered$value
)
) %>%
layout(font=list(size=15,
font_color="black"))
# Create Sankey diagram
plot_ly(type = "sankey", arrangement = "snap") %>%
add_trace(
# Set the domain (position) of the nodes
domain = list(x =  c(0, 1),
y =  c(0, 1)),
valueformat = ".3f",
# Set the orientation of the diagram to horizontal
orientation = "h",
# Set the label for each node
node = list(label = unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)),
# Set the source, target, and value for each link
link = list(
source = match(sankey_df_ordered$source, unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)) - 1,
target = match(sankey_df_ordered$target, unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)) - 1,
value = sankey_df_ordered$value
)
) %>%
layout(font=list(size=15,
font_weight="bold",
font_color="black"))
sqlite <- dbDriver("SQLite")
conn <- dbConnect(sqlite,"biodiversity_database.db")
dbListTables(conn)
conn
db_list_tables(conn)
class(conn)
RSQLite::dbListTables(conn=conn)
conn
conn[1]
conn[[1]]
sqlite <- dbDriver(RSQLite::SQLite())
library(RSQLite)
sqlite <- dbDriver(RSQLite::SQLite())
sqlite <- dbDriver("SQLite")
conn <- dbConnect(sqlite,"biodiversity_database.db")
sqlite
dbListTables(conn)
dbDisconnect()
install.packages("sparklyr")
multimedia <- sparklyr::spark_read_csv("C:/Users/ben29/OneDrive/Documents/appsilon_app/biodiversity-data/multimedia.fst")
sc <- spark_connect(master = "local")
library(sparklyr)
sc <- spark_connect(master = "local")
spark_versions()
spark_install()
sc <- spark_connect(master = "local")
sc <- spark_connect(master = "local")
library(data.table)
library(fst)
library(sparklyr)
sc <- spark_connect(master = "local")
sparklyr::spark_read_csv(sc=sc,
name="occurence",
path="C:/Users/ben29/OneDrive/Documents/appsilon_app/biodiversity-data/occurence.csv")
?sparklyr::spark_read_csv(sc=sc,
name="occurence",
path="C:/Users/ben29/OneDrive/Documents/appsilon_app/biodiversity-data/occurence.csv")
sparklyr::spark_read_csv(sc=sc,
name="multimedia",
path="C:/Users/ben29/OneDrive/Documents/appsilon_app/biodiversity-data/multimedia.csv",
memory=FALSE)
sc <- spark_connect(master = "local")
sparklyr::spark_read_csv(sc=sc,
name="multimedia",
path="C:/Users/ben29/OneDrive/Documents/appsilon_app/biodiversity-data/multimedia.csv",
memory=FALSE)
sc <- spark_connect(master = "local")
library(data.table)
library(fst)
library(sparklyr)
sc <- spark_connect(master = "local")
sparklyr::spark_read_csv(sc=sc,
name="multimedia",
path="C:/Users/ben29/OneDrive/Documents/appsilon_app/biodiversity-data/multimedia.csv",
memory=FALSE)
sparklyr::spark_read_csv(sc=sc,
name="occurence",
path="C:/Users/ben29/OneDrive/Documents/appsilon_app/biodiversity-data/occurence.csv",
memory=FALSE)
occurence
occurencePL <- dbGetQuery(sc,"SELECT * FROM occurence WHERE countryCode=='PL'")
occurencePL
# Preprocessing
library(data.table)
library(fst)
library(sparklyr)
# download_filepath <- "C:/Users/ben29/Downloads/biodiversity-data.tar.gz"
#
# untar(download_filepath)
# Now load data into SQLite by importing the csv files.
sc <- spark_connect(master = "local")
sparklyr::spark_read_csv(sc=sc,
name="multimedia",
path="./biodiversity-data/multimedia.csv",
memory=FALSE)
sparklyr::spark_read_csv(sc=sc,
name="multimedia",
path="./appsilon_app/biodiversity-data/multimedia.csv",
memory=FALSE)
sparklyr::spark_read_csv(sc=sc,
name="multimedia",
path="./appsilon_app/biodiversity_dashboard/biodiversity-data/multimedia.csv",
memory=FALSE)
shiny::runApp('appsilon_app/biodiversity_dashboard')
sparklyr::spark_disconnect(sc)
runApp('appsilon_app/biodiversity_dashboard')
shiny::runApp('appsilon_app/biodiversity_dashboard')
runApp('appsilon_app/biodiversity_dashboard')
sparklyr::spark_read_csv(sc=sc,
name="occurence",
path="./biodiversity-data/occurence.csv",
memory=FALSE)
# Preprocessing
library(data.table)
library(fst)
library(sparklyr)
sc <- spark_connect(master = "local")
sparklyr::spark_read_csv(sc=sc,
name="occurence",
path="./biodiversity-data/occurence.csv",
memory=FALSE)
sc <- spark_connect(master = "local")
occurencePL <- dbGetQuery(sc,"SELECT * FROM occurence WHERE countryCode=='PL'")
library(DBI)
occurencePL <- dbGetQuery(sc,"SELECT * FROM occurence WHERE countryCode=='PL'")
setwd("appsilon_app/biodiversity-dashboard")
setwd("appsilon_app/biodiversity_dashboard")
occurence_pl<-readr::read_csv("./biodiversity-data/occurence_pl.csv")%>%
group_by(locality,scientificName,vernacularName) %>%
summarize(n =n())
library(shiny)
library(tidyverse)
library(leaflet)
install.packages("htmltools")
install.packages("htmltools")
library(shiny)
library(tidyverse)
library(leaflet)
occurence_pl<-readr::read_csv("./biodiversity-data/occurence_pl.csv")%>%
group_by(locality,scientificName,vernacularName) %>%
summarize(n =n())
occurence_pl
occurence_pl$locality %>% unique9
occurence_pl$locality %>% unique()
occurence_pl<-readr::read_csv("./biodiversity-data/occurence_pl.csv")
occurence_pl %>% names()
occurence_pl$stateProvince
occurence_pl$stateProvince %>% unique()
occurence_pl %>% glimpse()
?selectizeInput
runApp()
library(shiny)
library(tidyverse)
library(leaflet)
occurence_pl<-readr::read_csv("./biodiversity-data/occurence_pl.csv")%>%
group_by(locality,scientificName,vernacularName) %>%
summarize(n =n())
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Appsilon Biodiversity Dashboard"),
# Sidebar with a slider input for number of bins
sidebarLayout(
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
),
sidebarPanel(
selectizeInput("vernacularName","Vernacular Name", choices = unique(occurence_pl[["vernacularName"]]))
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white',
xlab = 'Waiting time to next eruption (in mins)',
main = 'Histogram of waiting times')
})
}
# Run the application
shinyApp(ui = ui, server = server)
occurence_pl[["scientificName"]]
runApp()
runApp()
library(shiny)
library(tidyverse)
library(leaflet)
occurence_pl<-readr::read_csv("./biodiversity-data/occurence_pl.csv")%>%
group_by(locality,scientificName,vernacularName) %>%
summarize(n =n())
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Appsilon Biodiversity Dashboard"),
# Sidebar with a slider input for number of bins
sidebarLayout(
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
),
sidebarPanel(
selectizeInput("vernacularName",
"Vernacular Name",
choices = NULL),
selectizeInput("scientificName",
"Scientific Name",
choices = NULL)
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white',
xlab = 'Waiting time to next eruption (in mins)',
main = 'Histogram of waiting times')
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
