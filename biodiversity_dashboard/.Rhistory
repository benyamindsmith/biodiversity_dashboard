target = match(sankey_df_ordered$target, unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)) - 1,
value = sankey_df_ordered$value
)
) %>%
layout(font=list(size=10))
plot_ly(type = "sankey", arrangement = "snap") %>%
add_trace(
# Set the domain (position) of the nodes
domain = list(x =  c(0, 1),
y =  c(0, 1)),
valueformat = ".3f",
# Set the orientation of the diagram to horizontal
orientation = "h",
# Set the label for each node
node = list(label = unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)),
# Set the source, target, and value for each link
link = list(
source = match(sankey_df_ordered$source, unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)) - 1,
target = match(sankey_df_ordered$target, unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)) - 1,
value = sankey_df_ordered$value
)
) %>%
layout(font=list(size=10))
plot_ly(type = "sankey", arrangement = "snap") %>%
add_trace(
# Set the domain (position) of the nodes
domain = list(x =  c(0, 1),
y =  c(0, 1)),
valueformat = ".3f",
# Set the orientation of the diagram to horizontal
orientation = "h",
# Set the label for each node
node = list(label = unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)),
# Set the source, target, and value for each link
link = list(
source = match(sankey_df_ordered$source, unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)) - 1,
target = match(sankey_df_ordered$target, unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)) - 1,
value = sankey_df_ordered$value
)
) %>%
layout(font=list(size=20))
plot_ly(type = "sankey", arrangement = "snap") %>%
add_trace(
# Set the domain (position) of the nodes
domain = list(x =  c(0, 1),
y =  c(0, 1)),
valueformat = ".3f",
# Set the orientation of the diagram to horizontal
orientation = "h",
# Set the label for each node
node = list(label = unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)),
# Set the source, target, and value for each link
link = list(
source = match(sankey_df_ordered$source, unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)) - 1,
target = match(sankey_df_ordered$target, unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)) - 1,
value = sankey_df_ordered$value
)
) %>%
layout(font=list(size=20))
plot_ly(type = "sankey", arrangement = "snap") %>%
add_trace(
# Set the domain (position) of the nodes
domain = list(x =  c(0, 1),
y =  c(0, 1)),
valueformat = ".3f",
# Set the orientation of the diagram to horizontal
orientation = "h",
# Set the label for each node
node = list(label = unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)),
# Set the source, target, and value for each link
link = list(
source = match(sankey_df_ordered$source, unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)) - 1,
target = match(sankey_df_ordered$target, unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)) - 1,
value = sankey_df_ordered$value
)
) %>%
layout(font=list(size=15))
plot_ly(type = "sankey", arrangement = "snap") %>%
add_trace(
# Set the domain (position) of the nodes
domain = list(x =  c(0, 1),
y =  c(0, 1)),
valueformat = ".3f",
# Set the orientation of the diagram to horizontal
orientation = "h",
# Set the label for each node
node = list(label = unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)),
# Set the source, target, and value for each link
link = list(
source = match(sankey_df_ordered$source, unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)) - 1,
target = match(sankey_df_ordered$target, unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)) - 1,
value = sankey_df_ordered$value
)
) %>%
layout(font=list(size=15))
# Create Sankey diagram
plot_ly(type = "sankey", arrangement = "snap") %>%
add_trace(
# Set the domain (position) of the nodes
domain = list(x =  c(0, 1),
y =  c(0, 1)),
valueformat = ".3f",
# Set the orientation of the diagram to horizontal
orientation = "h",
# Set the label for each node
node = list(label = unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)),
# Set the source, target, and value for each link
link = list(
source = match(sankey_df_ordered$source, unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)) - 1,
target = match(sankey_df_ordered$target, unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)) - 1,
value = sankey_df_ordered$value
)
) %>%
layout(font=list(size=15,
weight="bold"))
# Create Sankey diagram
plot_ly(type = "sankey", arrangement = "snap") %>%
add_trace(
# Set the domain (position) of the nodes
domain = list(x =  c(0, 1),
y =  c(0, 1)),
valueformat = ".3f",
# Set the orientation of the diagram to horizontal
orientation = "h",
# Set the label for each node
node = list(label = unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)),
# Set the source, target, and value for each link
link = list(
source = match(sankey_df_ordered$source, unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)) - 1,
target = match(sankey_df_ordered$target, unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)) - 1,
value = sankey_df_ordered$value
)
) %>%
layout(font=list(size=15,
weight="bold"))
# Create Sankey diagram
plot_ly(type = "sankey", arrangement = "snap") %>%
add_trace(
# Set the domain (position) of the nodes
domain = list(x =  c(0, 1),
y =  c(0, 1)),
valueformat = ".3f",
# Set the orientation of the diagram to horizontal
orientation = "h",
# Set the label for each node
node = list(label = unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)),
# Set the source, target, and value for each link
link = list(
source = match(sankey_df_ordered$source, unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)) - 1,
target = match(sankey_df_ordered$target, unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)) - 1,
value = sankey_df_ordered$value
)
) %>%
layout(font=list(size=15,
font_color="black"))
# Create Sankey diagram
plot_ly(type = "sankey", arrangement = "snap") %>%
add_trace(
# Set the domain (position) of the nodes
domain = list(x =  c(0, 1),
y =  c(0, 1)),
valueformat = ".3f",
# Set the orientation of the diagram to horizontal
orientation = "h",
# Set the label for each node
node = list(label = unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)),
# Set the source, target, and value for each link
link = list(
source = match(sankey_df_ordered$source, unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)) - 1,
target = match(sankey_df_ordered$target, unique(
c(sankey_df_ordered$source, sankey_df_ordered$target)
)) - 1,
value = sankey_df_ordered$value
)
) %>%
layout(font=list(size=15,
font_weight="bold",
font_color="black"))
sqlite <- dbDriver("SQLite")
conn <- dbConnect(sqlite,"biodiversity_database.db")
dbListTables(conn)
conn
db_list_tables(conn)
class(conn)
RSQLite::dbListTables(conn=conn)
conn
conn[1]
conn[[1]]
sqlite <- dbDriver(RSQLite::SQLite())
library(RSQLite)
sqlite <- dbDriver(RSQLite::SQLite())
sqlite <- dbDriver("SQLite")
conn <- dbConnect(sqlite,"biodiversity_database.db")
sqlite
dbListTables(conn)
dbDisconnect()
install.packages("sparklyr")
multimedia <- sparklyr::spark_read_csv("C:/Users/ben29/OneDrive/Documents/appsilon_app/biodiversity-data/multimedia.fst")
sc <- spark_connect(master = "local")
library(sparklyr)
sc <- spark_connect(master = "local")
spark_versions()
spark_install()
sc <- spark_connect(master = "local")
sc <- spark_connect(master = "local")
library(data.table)
library(fst)
library(sparklyr)
sc <- spark_connect(master = "local")
sparklyr::spark_read_csv(sc=sc,
name="occurence",
path="C:/Users/ben29/OneDrive/Documents/appsilon_app/biodiversity-data/occurence.csv")
?sparklyr::spark_read_csv(sc=sc,
name="occurence",
path="C:/Users/ben29/OneDrive/Documents/appsilon_app/biodiversity-data/occurence.csv")
sparklyr::spark_read_csv(sc=sc,
name="multimedia",
path="C:/Users/ben29/OneDrive/Documents/appsilon_app/biodiversity-data/multimedia.csv",
memory=FALSE)
sc <- spark_connect(master = "local")
sparklyr::spark_read_csv(sc=sc,
name="multimedia",
path="C:/Users/ben29/OneDrive/Documents/appsilon_app/biodiversity-data/multimedia.csv",
memory=FALSE)
sc <- spark_connect(master = "local")
library(data.table)
library(fst)
library(sparklyr)
sc <- spark_connect(master = "local")
sparklyr::spark_read_csv(sc=sc,
name="multimedia",
path="C:/Users/ben29/OneDrive/Documents/appsilon_app/biodiversity-data/multimedia.csv",
memory=FALSE)
sparklyr::spark_read_csv(sc=sc,
name="occurence",
path="C:/Users/ben29/OneDrive/Documents/appsilon_app/biodiversity-data/occurence.csv",
memory=FALSE)
occurence
occurencePL <- dbGetQuery(sc,"SELECT * FROM occurence WHERE countryCode=='PL'")
occurencePL
# Preprocessing
library(data.table)
library(fst)
library(sparklyr)
# download_filepath <- "C:/Users/ben29/Downloads/biodiversity-data.tar.gz"
#
# untar(download_filepath)
# Now load data into SQLite by importing the csv files.
sc <- spark_connect(master = "local")
sparklyr::spark_read_csv(sc=sc,
name="multimedia",
path="./biodiversity-data/multimedia.csv",
memory=FALSE)
sparklyr::spark_read_csv(sc=sc,
name="multimedia",
path="./appsilon_app/biodiversity-data/multimedia.csv",
memory=FALSE)
sparklyr::spark_read_csv(sc=sc,
name="multimedia",
path="./appsilon_app/biodiversity_dashboard/biodiversity-data/multimedia.csv",
memory=FALSE)
shiny::runApp('appsilon_app/biodiversity_dashboard')
sparklyr::spark_disconnect(sc)
runApp('appsilon_app/biodiversity_dashboard')
shiny::runApp('appsilon_app/biodiversity_dashboard')
runApp('appsilon_app/biodiversity_dashboard')
sparklyr::spark_read_csv(sc=sc,
name="occurence",
path="./biodiversity-data/occurence.csv",
memory=FALSE)
# Preprocessing
library(data.table)
library(fst)
library(sparklyr)
sc <- spark_connect(master = "local")
sparklyr::spark_read_csv(sc=sc,
name="occurence",
path="./biodiversity-data/occurence.csv",
memory=FALSE)
sc <- spark_connect(master = "local")
occurencePL <- dbGetQuery(sc,"SELECT * FROM occurence WHERE countryCode=='PL'")
library(DBI)
occurencePL <- dbGetQuery(sc,"SELECT * FROM occurence WHERE countryCode=='PL'")
occurence_pl<-readr::read_csv("./biodiversity-data/occurence_pl.csv")%>%
group_by(locality,scientificName,vernacularName) %>%
summarize(n =n())
library(shiny)
library(tidyverse)
library(leaflet)
occurence_pl<-readr::read_csv("./biodiversity-data/occurence_pl.csv")%>%
group_by(locality,scientificName,vernacularName) %>%
summarize(n =n())
runApp('appsilon_app/biodiversity_dashboard')
?glue
occurence_pl<-readr::read_csv("./biodiversity-data/occurence_pl.csv")%>%
group_by(locality,scientificName,vernacularName) %>%
summarize(n =n()) %>%
mutate(display_name = glue::glue("{scientificName} ({vernacularName})",
scientificName=scientificName,
vernacularName=vernacularName))
runApp('appsilon_app/biodiversity_dashboard')
runApp('appsilon_app/biodiversity_dashboard')
runApp('appsilon_app/biodiversity_dashboard')
?leafletOutput
?setView
runApp('appsilon_app/biodiversity_dashboard')
runApp('appsilon_app/biodiversity_dashboard')
shiny::runApp('appsilon_app/biodiversity_dashboard')
runApp('appsilon_app/biodiversity_dashboard')
runApp('appsilon_app/biodiversity_dashboard')
runApp('appsilon_app/biodiversity_dashboard')
runApp('appsilon_app/biodiversity_dashboard')
updateSelectInput()
?updateSelectInput()
runApp('appsilon_app/biodiversity_dashboard')
runApp('appsilon_app/biodiversity_dashboard')
shiny::runApp('appsilon_app/biodiversity_dashboard')
runApp('appsilon_app/biodiversity_dashboard')
runApp('appsilon_app/biodiversity_dashboard')
library(shiny)
library(tidyverse)
library(lubridate)
library(glue)
library(leaflet)
library(plotly)
library(sf)
occurence_pl <-
readr::read_csv("./biodiversity-data/occurence_pl.csv") %>%
mutate(
display_name = glue(
"{scientificName} ({vernacularName})",
scientificName = scientificName,
vernacularName = vernacularName
),
popup = glue(
"
<b>{display_name}</b><br>
occurrence ID: {occurrence_id}<br>
Date Seen: {date_seen}<br>
Sex: {sex}<br>
Life Stage: {life_stage}<br>
Behavior: {behavior}",
display_name = display_name,
occurrence_id = occurrenceID,
date_seen = as.Date(eventDate),
sex = sex,
life_stage = lifeStage,
behavior = behavior
)
)
runApp('appsilon_app/biodiversity_dashboard')
runApp('appsilon_app/biodiversity_dashboard')
runApp('appsilon_app/biodiversity_dashboard')
runApp('appsilon_app/biodiversity_dashboard')
shiny::runApp('appsilon_app/biodiversity_dashboard')
runApp('appsilon_app/biodiversity_dashboard')
setwd("appsilon_app/biodiversity_dashboard")
runApp()
occurence_pl <-
readr::read_csv("./biodiversity-data/occurence_pl.csv") %>%
mutate(
display_name = glue(
"{scientificName} ({vernacularName})",
scientificName = scientificName,
vernacularName = vernacularName
),
popup = glue(
"
<b>{display_name}</b><br>
occurrence ID: {occurrence_id}<br>
Date Seen: {date_seen}<br>
Sex: {sex}<br>
Life Stage: {life_stage}<br>
Behavior: {behavior}",
display_name = display_name,
occurrence_id = occurrenceID,
date_seen = as.Date(eventDate),
sex = sex,
life_stage = lifeStage,
behavior = behavior
)
)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel(title = div(
img(src = "appsilon_logo.png",
width = "200px"),
"Biodiversity Dashboard"
)),
selectizeInput(
"searchSpecies",
"Search Species",
choices = NULL
),
# Sidebar with a slider input for number of bins
fixedRow(column(6,
leafletOutput("mapOutput")),
column(6,
plotlyOutput("timelineOutput")))
)
# Define server logic required to draw a histogram
server <- function(input, output, session) {
updateSelectizeInput(
session,
'searchSpecies',
choices = unique(occurence_pl$display_name),
server = TRUE
)
mapOutput <- eventReactive(input$searchSpecies, {
occurence_pl %>%
filter(display_name %in% input$searchSpecies) %>%
leaflet(options = leafletOptions(attributionControl=FALSE)) %>%
addTiles() %>%
addCircleMarkers(
lng =  ~ longitudeDecimal,
lat =  ~ latitudeDecimal,
popup = ~ popup
)
})
output$mapOutput <- renderLeaflet(mapOutput())
timelineData <- eventReactive(input$searchSpecies,
{
occurence_pl %>%
filter(display_name == input$searchSpecies) %>%
mutate(
month = eventDate %>%
as.Date() %>%
month(),
year = eventDate %>% as.Date() %>% year(),
month_year = glue("{month}-{year}",
month = month,
year = year) %>% my()
) %>%
group_by(month_year) %>%
summarize(n = n()) %>%
plot_ly(
x = ~ month_year,
y = ~ n,
fill = "blue",
type = "scatter",
mode = "lines"
) %>%
layout(
title = "Monthly Frequency Over Time",
xaxis = list(title = ""),
yaxis = list(title = "",
dtick = 1)
)
})
output$timelineOutput <- renderPlotly(timelineData())
}
# Run the application
shinyApp(ui = ui, server = server)
occurence_pl$display_name
occurence_pl$display_name %>% unique()
occurence_pl$vernacularName %>% unique()
runApp()
